[{"url":"/zkit/content/components/context-menu/","title":"Context Menu","description":"A bottom popping context menu, like the one commonly used on mobile devices.","content":"Animated context menu component that does not require JavaScript coding for a basic use. This component is framework-agnostic, it will play nicely in combination with any UI framework. {% zx &quot;button&quot; &quot;javascript:zuix.context(&#39;my-menu&#39;).show()&quot; &quot;raised&quot; &quot;colored&quot; %} Example {% endzx %} {% include &#39;common/zkit-basic-usage.md&#39; %} ### 2. Add the context menu `div` markup Put inside the field `menu` the code of your menu items. ```html Option 1 Option 2 Option 3 ``` The context menu already provides basic styling for the `button` element, thou"},{"url":"/zkit/content/controllers/header-auto-hide/","title":"Auto hiding header","description":"Automatically hides/reveals header on scroll.","content":"// TODO: ..."},{"url":"/zkit/content/components/menu-overlay/","title":"Menu Overlay","description":"A classic floating action button activated menu for page-contextual operations.","content":"A menu overlay activated by a floating action button. The pink button in the lower right corner of this page is a sample usage. No JavaScript coding is required for a basic use. This component is framework-agnostic, so it can be used with any UI framework or even with just plain `HTML/CSS`. {% include &#39;common/zkit-basic-usage.md&#39; %} ### 2. Add the menu markup Put inside the field `items` the code for your menu items. ```html Menu Item 1 Menu Item 2 Menu Item 3 ``` ... and that&#39;s it! Super duper easy **: )** ## Option attributes - `z-load=&quot;@lib/components/menu-overlay&quot;` co"},{"url":"/zkit/content/components/media-browser/","title":"Media Browser","description":"A gestures enabled media browser supporting image, videos and text.","content":"An image/video gallery component configurable with minimal HTML code. **Features:** - navigation by onscreen controls, keyboard or gestures - thumbnails carousel - images with customizable title/description overlay - MP4, WebM, and Ogg videos - youtube videos - fullscreen mode - inline / detached mode - automatic play/pause when entering or going off-screen {% include &#39;common/zkit-basic-usage.md&#39; -%} ### 2. Add the media list markup Put inside the field media the markup defining image and video list. ```html Title Description of the image. Open media Open media Open media ``` That&#39;"},{"url":"/zkit/content/controllers/drawer-layout/","title":"Drawer Layout","description":"An adaptive drawer layout for both mobile and desktop displays, gestures enabled.","content":"This is a responsive implementation of a *navigation drawer* that will also work on wide screens where the drawer will stay open on the left side. The navigation drawer is a UI panel that shows your app&#39;s main navigation menu. It is hidden when not in use, but appears when the user swipes a finger from the left edge of the screen or, when at the top level of the app, the user touches the drawer icon in the app bar. {% include &#39;common/zkit-basic-usage.md&#39; %} ### 2. Load the drawer layout Add the `ctrl z-load` attributes to the container of your navigation drawer ```html ``` Set the "},{"url":"/zkit/content/controllers/scroll-helper/","title":"Scroll Helper","description":"Scroll helper to improve page scrolling handling, watching elements and get notified when they scroll into view.","content":"{% include &#39;common/zkit-basic-usage.md&#39; %} ## 2. Load the scroll helper Add the `ctrl z-load` attributes to the host element implementing the scrollbar (usually the main `body` or a `div` element): ```html ``` ## Option attributes - `ctrl z-load=&quot;@lib/controllers/scroll-helper&quot;` constructor load the `scroll-helper` controller on the element. - `z-context` optional identifier name to be used to access this component from JavaScript. ## Scripting ### Get a reference to the scroll helper object Before component is loaded ```js var scrollHelper; // it will be == null until compon"},{"url":"/zkit/content/controllers/view-pager/","title":"View Pager","description":"View Pager component for implementing carousel, gallery, tab-views. Gesture enabled, for desktop and mobile.","content":"A versatile ViewPager controller, featuring both horizontal and vertical layout, gestures and automatic sliding. {% include &#39;common/zkit-basic-usage.md&#39; %} ### 2. Load the scroll helper Add the `ctrl z-load` attributes to the host element implementing the scrollbar (usually the main `body` or a `div` element): ```html Page 1 Page 2 Page 3 ``` The ViewPager will re-arrange all elements stacked horizontally or vertically accordingly to the chosen layout mode. Elements do not necessarily require to be sized full screen, they can have different sizes, in which case the ViewPager will cente"},{"url":"/zkit/content/controllers/gesture-helper/","title":"Gesture Helper","description":"Helper class for detecting common touch gestures.","content":"Detect tap and swipe gestures over elements. {% unpre %} ```html Try me! gesture_opts = { passive: false, ready: function() { let gh = this; let view = zuix.$(gh.view()); let infoXy = zuix.field(&#39;gesture-xy&#39;); let infoShift = zuix.field(&#39;gesture-shift&#39;); let info = zuix.field(&#39;gesture&#39;); view.css(&#39;opacity&#39;, 1.0); // register event callbacks gh.on(&#39;gesture:touch&#39;, function(e, tp) { view.addClass(&#39;active&#39;); info.html(&#39;touch&#39;).playAnimation(&#39;animate__flash&#39;); tp.cancel(); }).on(&#39;gesture:pan&#39;, function(e, tp) { infoXy.show().h"}]