
{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["description"],"id":"description","weight":1,"src":"description","getFn":null},{"path":["content"],"id":"content","weight":1,"src":"content","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"Media Browser","n":0.707},"1":{"v":"A gestures enabled media browser supporting image, videos and text.","n":0.316},"2":{"v":"An image/video gallery component configurable with minimal HTML code. **Features:** - navigation by onscreen controls, keyboard or gestures - thumbnails carousel - images with customizable title/description overlay - MP4, WebM, and Ogg videos - youtube videos - fullscreen mode - inline / detached mode - automatic play/pause when entering or going off-screen ## Usage Method #1 Method #2 ### 1. Import `media-browser` component module ```html import &quot;{{ app.zkit.libraryPath }}components/media-browser.module.js&quot;; ``` ### 2. Add component to the page ```html Title Description of the image","n":0.11}}},{"i":1,"$":{"0":{"v":"Context Menu","n":0.707},"1":{"v":"A bottom popping context menu, like the one commonly used on mobile devices.","n":0.277},"2":{"v":"Animated context menu component that does not require JavaScript coding for a basic use. This component is framework-agnostic, it will play nicely in combination with any UI framework. {% zx &quot;button&quot; &quot;javascript:zuix.context(&#39;my-menu&#39;).show()&quot; &quot;raised&quot; &quot;colored&quot; %} Example {% endzx %} ## Usage Method #1 Method #2 ### 1. Import `context-menu` component module ```html import &quot;{{ app.zkit.libraryPath }}components/context-menu.module.js&quot;; ``` ### 2. Add component to the page Put inside the `#menu` field the code of your menu items. ```html ","n":0.115}}},{"i":2,"$":{"0":{"v":"Menu Overlay","n":0.707},"1":{"v":"A classic floating action button activated menu for page-contextual operations.","n":0.316},"2":{"v":"A menu overlay activated by a floating action button. The pink button in the lower right corner of this page is a sample usage. No JavaScript coding is required for a basic use. This component is framework-agnostic, so it can be used with any UI framework or even with just plain `HTML/CSS`. ## Usage Method #1 Method #2 ### 1. Import `menu-overlay` component module ```html import &quot;{{ app.zkit.libraryPath }}components/menu-overlay.module.js&quot;; ``` ### 2. Add component to the page ```html Menu Item 1 Menu Item 2 Menu Item 3 ``` {% include &#39;common/zkit-basic-usage.liquid&#39; %} ### 2","n":0.103}}},{"i":3,"$":{"0":{"v":"Gesture Helper","n":0.707},"1":{"v":"Helper class for detecting common touch gestures.","n":0.378},"2":{"v":"{% include &#39;./_inc/demo.liquid&#39; %} ## Usage Method #1 Method #2 ### 1. Import `gesture-helper` component module ```html import &quot;{{ app.zkit.libraryPath }}controllers/gesture-helper.module.js&quot;; ``` ### 2. Add component Add the gesture helper component inside the detection area element: ```html ``` {% include &#39;common/zkit-basic-usage.liquid&#39; %} ### 2. Load the gesture helper on the target element Add the `ctrl z-load` attributes to the element you want to detect gesture over ```html ``` ## Option attributes - `z-context=&quot;&lt;context_id&gt;&quot;` optional identifie","n":0.115}}},{"i":4,"$":{"0":{"v":"Drawer Layout","n":0.707},"1":{"v":"An adaptive drawer layout for both mobile and desktop displays, gestures enabled.","n":0.289},"2":{"v":"This is a responsive implementation of a *navigation drawer* that will also work on wide screens where the drawer will stay open on the left side. The navigation drawer is a UI panel that shows your app&#39;s main navigation menu. It is hidden when not in use, but appears when the user swipes a finger from the left edge of the screen or, when at the top level of the app, the user touches the drawer icon in the app bar. ## Usage Method #1 Method #2 ### 1. Import `drawer-layout` component module ```html import &quot;{{ app.zkit.libraryPath }}controllers/drawer-layout.module.js&quot;; ``` ### 2. ","n":0.1}}},{"i":5,"$":{"0":{"v":"Transpose Fx","n":0.707},"1":{"v":"Transpose effect to transition a component between two views","n":0.333},"2":{"v":"The `transpose-fx` controller can be used to swap an element from a view to another one. For instance when an element in a list view is clicked and the detail view of that element is then shown. **Demo:** Tap elements to pop up the details view: {% unpre %} ```html {% include &#39;./_inc/example.liquid&#39; %} ``` {% endunpre %} ## Usage Method #1 Method #2 ### 1. Import `transpose-fx` component module ```html import &quot;{{ app.zkit.libraryPath }}controllers/transpose-fx.module.js&quot;; ``` ### 2. Add component Add the `transpose-fx` component inside the element hosting the target view: ```","n":0.104}}},{"i":6,"$":{"0":{"v":"Scroll Helper","n":0.707},"1":{"v":"Scroll helper to improve page scrolling handling, watching elements and get notified when they scroll into view.","n":0.243},"2":{"v":"## Usage Method #1 Method #2 ### 1. Import `scroll-helperr` component module ```html import &quot;{{ app.zkit.libraryPath }}controllers/scroll-helper.module.js&quot;; ``` ### 2. Add component Add the scroll helper component inside the host element implementing the scrollbar (usually the `body` or a `div` element): ```html ``` {% include &#39;common/zkit-basic-usage.liquid&#39; %} ### 2. Load the scroll helper Add the `ctrl z-load` attributes to the host element implementing the scrollbar (usually the `body` or a `div` element): ```html ``` ## Option attributes - `z-context=&quot;&lt;context_id","n":0.113}}},{"i":7,"$":{"0":{"v":"View Pager","n":0.707},"1":{"v":"View Pager component for implementing carousel, gallery, tab-views. Gesture enabled, for desktop and mobile.","n":0.267},"2":{"v":"A versatile ViewPager controller, featuring both horizontal and vertical layout, gestures and automatic sliding. ## Usage Method #1 Method #2 ### 1. Import `view-pager` component module ```html import &quot;{{ app.zkit.libraryPath }}controllers/view-pager.module.js&quot;; ``` ### 2. Add component to the page ```html Page 1 Page 2 Page 3 ``` {% include &#39;common/zkit-basic-usage.liquid&#39; %} ### 2. Load the view pager Add the `ctrl z-load` attributes to the host element: ```html Page 1 Page 2 Page 3 ``` The ViewPager will re-arrange all elements stacked horizontally or vertically accordingl","n":0.108}}},{"i":8,"$":{}},{"i":9,"$":{"0":{"v":"Auto hiding header","n":0.577},"1":{"v":"Automatically hides/reveals header on scroll.","n":0.447},"2":{"v":"## Usage Method #1 Method #2 ### 1. Import `header-auto-hide` component module ```html import &quot;{{ app.zkit.libraryPath }}controllers/header-auto-hide.module.js&quot;; ``` ### 2. Add component to the page ```html ... ... ``` {% include &#39;common/zkit-basic-usage.liquid&#39; %} ### 2. Load the drawer layout Add the `ctrl z-load` attributes to the container of your navigation drawer ```html ... ... ``` ### Option attributes - `z-context=&quot;&lt;context_id&gt;&quot;` optional identifier name to be used to access this component from JavaScript. - `:on:&lt;event_name&gt;=&quot;&quot;` optio","n":0.115}}}]}
